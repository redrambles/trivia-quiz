{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","App.js","index.js"],"names":["categoryTable","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","isModalOpen","setIsModalOpen","amount","category","difficulty","startQuiz","setStartQuiz","nextQuestion","prevIndex","updatedIndex","length","openModal","Provider","value","verifyAnswer","isCorrect","oldTotal","closeModal","handleQuizChange","e","target","name","prevValues","handleQuizSubmit","preventDefault","catNum","url","a","axios","get","response","data","results","console","log","err","fetchQuestions","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","onChange","min","max","onClick","Loading","Modal","headingText","resultPercentage","toFixed","heading","App","question","incorrect_answers","correct_answer","allAnswers","randIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","idx","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96d0bc25.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport axios from \"axios\";\n\nconst categoryTable = {\n\tsports: 21,\n\thistory: 23,\n\tpolitics: 24,\n};\n\nconst API_ENDPOINT = \"https://opentdb.com/api.php?\";\n\n// const starterUrl = \"https://opentdb.com/api.php?amount=10&category=21&difficulty=easy&type=multiple\";\n// const testUrl = \"https://opentdb.com/api.php?amount=50&category=24&difficulty=medium\"; // This will give no results\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n\tconst [waiting, setWaiting] = useState(true);\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState([]);\n\tconst [index, setIndex] = useState(0);\n\tconst [correct, setCorrect] = useState(0);\n\tconst [error, setError] = useState(false);\n\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [startQuiz, setStartQuiz] = useState({\n\t\tamount: 10,\n\t\tcategory: \"sports\",\n\t\tdifficulty: \"easy\",\n\t});\n\n\tconst nextQuestion = () => {\n\t\tsetIndex((prevIndex) => {\n\t\t\tconst updatedIndex = prevIndex + 1;\n\t\t\tif (updatedIndex > questions.length - 1) {\n\t\t\t\topenModal();\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn updatedIndex;\n\t\t\t}\n\t\t});\n\t};\n\n\tconst verifyAnswer = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetCorrect((oldTotal) => oldTotal + 1);\n\t\t}\n\t\tnextQuestion();\n\t};\n\n\tconst openModal = () => {\n\t\tsetIsModalOpen(true);\n\t};\n\n\tconst closeModal = () => {\n\t\tsetIsModalOpen(false);\n\t\tsetWaiting(true);\n\t\tsetCorrect(0);\n\t};\n\n\tconst handleQuizChange = (e) => {\n\n\t\tconst { name, value } = e.target;\n\t\tsetStartQuiz((prevValues) => ({ ...prevValues, [name]: value }));\n\t};\n\tconst handleQuizSubmit = (e) => {\n    // no refreshes plz\n\t\te.preventDefault();\n    // construct our api url\n\t\tconst { amount, category, difficulty} = startQuiz;\n\t\tconst catNum = categoryTable[category];\n\t\tconst url = `${API_ENDPOINT}amount=${amount}&category=${catNum}&difficulty=${difficulty}&type=multiple`;\n    // fetch!\n\t\tconst fetchQuestions = async (url) => {\n\t\t\tsetLoading(true); // waiting for the promise to resolve\n\t\t\tsetWaiting(false); // we are no longer making a choice in our form\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(url);\n\t\t\t\tif (response.data.results.length > 0) {\n\t\t\t\t\tconst data = response.data.results;\n\t\t\t\t\tsetQuestions(data);\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tsetWaiting(false);\n\t\t\t\t\tsetError(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetWaiting(true);\n\t\t\t\t\tsetError(true);\n\t\t\t\t\tconsole.log(\"No results\");\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.err(err);\n\t\t\t\tsetWaiting(true);\n\t\t\t}\n\t\t};\n\n\t\tfetchQuestions(url);\n\t};\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\twaiting,\n\t\t\t\tloading,\n\t\t\t\tquestions,\n\t\t\t\tindex,\n\t\t\t\tcorrect,\n\t\t\t\terror,\n\t\t\t\tisModalOpen,\n\t\t\t\tnextQuestion,\n\t\t\t\tverifyAnswer,\n\t\t\t\tcloseModal,\n\t\t\t\thandleQuizChange,\n\t\t\t\thandleQuizSubmit,\n\t\t\t\tstartQuiz,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n};\n// make sure use\nexport const useGlobalContext = () => {\n\treturn useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst SetupForm = () => {\n\tconst { startQuiz, handleQuizSubmit, handleQuizChange, error } = useGlobalContext();\n\treturn (\n\t\t<main>\n\t\t\t<section className='quiz quiz-small'>\n\t\t\t\t<form className='setup-form'>\n\t\t\t\t\t<div className='form-control'>\n\t\t\t\t\t\t<label htmlFor='amount'>number of questions</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='form-input'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tname='amount'\n\t\t\t\t\t\t\tid='amount'\n\t\t\t\t\t\t\tvalue={startQuiz.amount}\n\t\t\t\t\t\t\tonChange={handleQuizChange}\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tmax={50}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='form-control'>\n\t\t\t\t\t\t<label htmlFor='category'>Category</label>\n\t\t\t\t\t\t<select className='form-input' name='category' id='category' value={startQuiz.category} onChange={handleQuizChange}>\n\t\t\t\t\t\t\t<option value='sports'>sports</option>\n\t\t\t\t\t\t\t<option value='history'>history</option>\n\t\t\t\t\t\t\t<option value='politics'>politics</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='form-control'>\n\t\t\t\t\t\t<label htmlFor='difficulty'>Difficulty</label>\n\t\t\t\t\t\t<select className='form-input' name='difficulty' id='difficulty' value={startQuiz.difficulty} onChange={handleQuizChange}>\n\t\t\t\t\t\t\t<option value='easy'>easy</option>\n\t\t\t\t\t\t\t<option value='medium'>intermediate</option>\n\t\t\t\t\t\t\t<option value='hard'>challenging</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t{error && <p className='error'>Unable to comply - please try different options.</p>}\n\t\t\t\t\t<button className='submit-btn' type='submit' onClick={handleQuizSubmit}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</section>\n\t\t</main>\n\t);\n};\n\nexport default SetupForm;\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <main>\n      <div className='loading'></div>\n    </main>\n  )\n}\n\nexport default Loading\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst Modal = () => {\n\tconst { closeModal, questions, correct, isModalOpen } = useGlobalContext();\n\n  const heading = () => {\n    let headingText = \"Congrats\"\n    const resultPercentage = ((correct / questions.length) * 100).toFixed(0)\n    if (resultPercentage >= 90){\n      headingText = \"AMAZING!!\"\n    } else if (resultPercentage >= 75 ){\n      headingText = \"Nicely done!\"\n    } else if (resultPercentage >= 60 ){\n      headingText = \"Not bad!\"\n    } else if (resultPercentage >= 50){\n      headingText = \"Ouch. Better luck next time!\"\n    } else if (resultPercentage < 50){\n      headingText = \"Oof.\"\n    }\n    return headingText;\n  }\n\n\treturn (\n\t\t<div className={isModalOpen ? \"modal-container isOpen\" : \"modal-container\"}>\n\t\t\t<div className='modal-content'>\n\t\t\t\t<h2>{heading()}</h2>\n\t\t\t\t<p>\n\t\t\t\t\tYour score is { (( correct / questions.length ) * 100).toFixed(0)}%!\n\t\t\t\t</p>\n\t\t\t\t<button\tclassName=\"close-btn\" onClick={closeModal}>X</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Modal;\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nimport SetupForm from \"./SetupForm\";\nimport Loading from \"./Loading\";\nimport Modal from \"./Modal\";\nfunction App() {\n\tconst { waiting, loading, questions, index, correct, nextQuestion, verifyAnswer } = useGlobalContext();\n\n\tif (waiting) {\n\t\treturn <SetupForm />;\n\t}\n\n\tif (loading) {\n\t\treturn <Loading />;\n\t}\n\n\tconst { question, incorrect_answers, correct_answer } = questions[index];\n\n\t// const allAnswers = [correct_answer, ...incorrect_answers];\n  let allAnswers = [...incorrect_answers];\n  // Get a random index between 0-3 to decide where to insert our correct answer\n  const randIndex = Math.floor(Math.random() * 3)\n  // Push the answer at this randomIndex position at the back of the array (which will double it)\n  allAnswers.push(allAnswers[randIndex])\n  // Now we have two incorrect answers that are the same. Replace the first one with the correct answer\n  allAnswers[randIndex] = correct_answer\n\n\treturn (\n\t\t<main>\n\t\t\t{<Modal />}\n\t\t\t<section className='quiz'>\n\t\t\t\t<p className='correct-answers'>\n\t\t\t\t\tcorrect answers : {correct}/{questions.length}\n\t\t\t\t</p>\n\t\t\t\t{/* This will allow us to see the correct characters - do not use this if the user is submitting it (i.e. via form) */}\n\t\t\t\t<article className='container'>\n\t\t\t\t\t<h2 dangerouslySetInnerHTML={{ __html: question }} />\n\t\t\t\t\t<div className='btn-container'>\n\t\t\t\t\t\t{allAnswers.map((answer, idx) => (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"answer-btn\"\n\t\t\t\t\t\t\t\tkey={idx}\n                onClick={() => verifyAnswer(answer === correct_answer)}\n\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: answer }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</article>\n\t\t\t\t<button onClick={nextQuestion} className='next-question'>\n\t\t\t\t\tNext Question\n\t\t\t\t</button>\n\t\t\t</section>\n\t\t</main>\n\t);\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}